[gd_scene load_steps=34 format=2]

[ext_resource path="res://assets/ui/computer.png" type="Texture" id=1]
[ext_resource path="res://assets/backgrounds/cockpit-screens.png" type="Texture" id=2]
[ext_resource path="res://assets/ui/computer-dots.png" type="Texture" id=3]
[ext_resource path="res://assets/backgrounds/cockpit-lines.png" type="Texture" id=4]
[ext_resource path="res://godot/theme.tres" type="Theme" id=5]
[ext_resource path="res://assets/ui/computer-glare.png" type="Texture" id=6]
[ext_resource path="res://assets/ui/charge-bar-full.png" type="Texture" id=7]
[ext_resource path="res://assets/backgrounds/cockpit-background.png" type="Texture" id=8]
[ext_resource path="res://assets/ui/peggle.png" type="Texture" id=9]
[ext_resource path="res://assets/ui/light.png" type="Texture" id=10]
[ext_resource path="res://scripts/Camera.gd" type="Script" id=11]
[ext_resource path="res://scenes/PegglePositions.tscn" type="PackedScene" id=12]
[ext_resource path="res://scripts/Pegs.gd" type="Script" id=13]
[ext_resource path="res://scripts/PowerBarPanel.gd" type="Script" id=14]
[ext_resource path="res://assets/ui/side-bar-sheet3.png" type="Texture" id=15]
[ext_resource path="res://scenes/Hologram.tscn" type="PackedScene" id=20]

[sub_resource type="Environment" id=33]
background_mode = 4
glow_enabled = true
glow_intensity = 0.05
glow_blend_mode = 0
glow_hdr_scale = 0.0
glow_bicubic_upscale = true
glow_high_quality = true

[sub_resource type="Shader" id=8]
code = "shader_type canvas_item;

uniform vec4 bg_color: hint_color;

float rand(vec2 st) {
    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);
}

void fragment() {
	float size = 20.0;
	float prob = 0.995;
	vec2 pos = floor(1.0 / size * FRAGCOORD.xy);
	float color = 0.0;
	float starValue = rand(pos);

	if (starValue > prob)
	{
		vec2 center = size * pos + vec2(size, size) * 0.5;
		float t = 0.9 + 0.2 * sin(TIME * 8.0 + (starValue - prob) / (1.0 - prob) * 45.0);
		color = 1.0 - distance(FRAGCOORD.xy, center) / (0.5 * size);
		color = color * t / (abs(FRAGCOORD.y - center.y)) * t / (abs(FRAGCOORD.x - center.x));
	}
	else if (rand(SCREEN_UV.xy / 20.0) > 0.996)
	{
		float r = rand(SCREEN_UV.xy);
		color = r * (0.85 * sin(TIME * (r * 5.0) + 720.0 * r) + 0.95);
	}
	COLOR = vec4(vec3(color),1.0) + bg_color;
}"

[sub_resource type="ShaderMaterial" id=32]
shader = SubResource( 8 )
shader_param/bg_color = Color( 0.105882, 0.121569, 0.129412, 1 )

[sub_resource type="Shader" id=45]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 1.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));


    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment()
{
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, rays * color.a);
}"

[sub_resource type="ShaderMaterial" id=46]
shader = SubResource( 45 )
shader_param/angle = 0.246
shader_param/position = 0.192
shader_param/spread = 0.535
shader_param/cutoff = 0.108
shader_param/falloff = 1.0
shader_param/edge_fade = 0.169
shader_param/speed = 10.0
shader_param/ray1_density = 128.0
shader_param/ray2_density = 30.0
shader_param/ray2_intensity = 0.0
shader_param/color = Color( 1.14, 1.82, 1.5, 1 )
shader_param/hdr = false
shader_param/seed = 5.0

[sub_resource type="Animation" id=36]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 0.572549, 0.909804, 0.752941, 1 ) ]
}

[sub_resource type="Animation" id=37]
resource_name = "flash"
length = 2.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 0.572549, 0.909804, 0.752941, 1 ), Color( 0.901961, 0.270588, 0.223529, 1 ) ]
}

[sub_resource type="Shader" id=49]
code = "shader_type canvas_item;

uniform vec2 resolution = vec2(64.0, 64.0);
uniform float noise : hint_range(0.0, 1.0) = 0.2;
uniform float distort : hint_range(0.0, 1.0) = 0.06;
uniform float offset : hint_range(0.0, 1.0) = 0.0;

vec2 random(vec2 uv){
    uv = vec2(dot(uv, vec2(127.1,311.7)), dot(uv, vec2(269.5,183.3)));
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

float between(float lower, float upper, float value) {
	return step(lower, value) * step(value, upper);
}

void fragment()
{
	vec2 uv = UV;
	// Distort
	float oy = offset / 10.;
	float dist = distort * clamp(offset / 2., 0.25, 0.75);
	uv.x += dist * between(0.7, 0.8, fract(offset + TIME/2.)) * between(0.4, 0.41 + oy, uv.y);
	uv.x -= dist * between(0.1, 0.15, fract(offset + TIME/1.)) * between(0.7, 0.71 + oy, uv.y);
	uv.x += dist * between(0.15, 0.25, fract(offset + TIME/1.)) * between(0.6, 0.61 + oy, uv.y);
	uv.x += dist * between(0.5, 0.55, fract(offset + TIME/3.)) * between(0.5, 0.73 - oy, uv.y);
	// Add noise
	vec4 pxl = texture(TEXTURE, uv);
	pxl.rgb += clamp(random((ceil(UV * resolution) / resolution) + trunc(fract(TIME) * 4.)).x, 0.0, 1.0) * noise;
	// Shade
	COLOR = pxl;
}"

[sub_resource type="ShaderMaterial" id=50]
shader = SubResource( 49 )
shader_param/resolution = Vector2( 256, 256 )
shader_param/noise = 0.044
shader_param/distort = 0.249
shader_param/offset = 0.0

[sub_resource type="ViewportTexture" id=44]
viewport_path = NodePath("Viewport")

[sub_resource type="Shader" id=47]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 1.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));


    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment()
{
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, rays * color.a);
}"

[sub_resource type="ShaderMaterial" id=48]
shader = SubResource( 47 )
shader_param/angle = 0.246
shader_param/position = 0.192
shader_param/spread = 0.535
shader_param/cutoff = 0.108
shader_param/falloff = 1.0
shader_param/edge_fade = 0.169
shader_param/speed = 10.0
shader_param/ray1_density = 128.0
shader_param/ray2_density = 30.0
shader_param/ray2_intensity = 0.0
shader_param/color = Color( 1.14118, 1.81961, 1.50196, 0.145098 )
shader_param/hdr = false
shader_param/seed = 5.0

[sub_resource type="ParticlesMaterial" id=38]
flag_disable_z = true
spread = 180.0
gravity = Vector3( 0, 200, 0 )
initial_velocity = 207.9
initial_velocity_random = 1.0
orbit_velocity = 0.0
orbit_velocity_random = 0.0
color = Color( 6, 5.58, 1.02, 1 )

[sub_resource type="Animation" id=34]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:energy")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 2.05 ]
}

[sub_resource type="Animation" id=35]
resource_name = "flash"
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:energy")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 2.05, 0.0 ]
}

[sub_resource type="Animation" id=51]
resource_name = "Blink"
length = 0.6
tracks/0/type = "value"
tracks/0/path = NodePath(".:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.15, 0.3, 0.45 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ false, true, false, true ]
}

[sub_resource type="Animation" id=52]
resource_name = "flash"
length = 2.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ true, false ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("../Dots:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0.4, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ true, false ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("../Dots:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0.2, 0.8 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ true, false ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("../Dots:visible")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.6 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ true, false ]
}

[node name="Node2D" type="Node2D"]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 33 )

[node name="Viewport" type="Viewport" parent="."]
size = Vector2( 500, 500 )
own_world = true
transparent_bg = true
handle_input_locally = false
hdr = false

[node name="Hologram" parent="Viewport" instance=ExtResource( 20 )]

[node name="Background" type="Node2D" parent="."]

[node name="Space" type="Panel" parent="Background"]
modulate = Color( 0.6, 0.6, 0.6, 1 )
material = SubResource( 32 )
margin_right = 2000.0
margin_bottom = 1040.0
theme = ExtResource( 5 )

[node name="Glow" type="Panel" parent="Background"]
modulate = Color( 1, 1, 1, 0.4 )
material = SubResource( 46 )
margin_left = 1158.0
margin_top = 560.0
margin_right = 1465.0
margin_bottom = 725.0
rect_rotation = 180.0

[node name="CockpitBackground" type="TextureRect" parent="Background"]
margin_right = 1600.0
margin_bottom = 1040.0
texture = ExtResource( 8 )

[node name="CockpitLines" type="TextureRect" parent="Background"]
modulate = Color( 0.572549, 0.909804, 0.752941, 1 )
margin_right = 1600.0
margin_bottom = 1040.0
texture = ExtResource( 4 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="Background/CockpitLines"]
anims/RESET = SubResource( 36 )
anims/flash = SubResource( 37 )

[node name="CockpitScreens" type="TextureRect" parent="Background"]
modulate = Color( 1.37, 0.86, 0.86, 1 )
margin_right = 1600.0
margin_bottom = 1040.0
texture = ExtResource( 2 )

[node name="Hologram" type="Sprite" parent="Background"]
material = SubResource( 50 )
position = Vector2( 1000, 384 )
rotation = 3.14159
texture = SubResource( 44 )

[node name="Glow2" type="Panel" parent="Background"]
modulate = Color( 1, 1, 1, 0.4 )
material = SubResource( 48 )
margin_left = 1158.0
margin_top = 560.0
margin_right = 1465.0
margin_bottom = 725.0
rect_rotation = 180.0

[node name="Particles2D" type="Particles2D" parent="Background"]
position = Vector2( 112, 12 )
amount = 80
lifetime = 7.0
explosiveness = 1.0
process_material = SubResource( 38 )

[node name="Light2D" type="Light2D" parent="Background"]
position = Vector2( 128, 160 )
texture = ExtResource( 10 )
texture_scale = 2.43
color = Color( 0.945098, 0, 0, 1 )
energy = 2.05

[node name="AnimationPlayer" type="AnimationPlayer" parent="Background/Light2D"]
autoplay = "flash"
anims/RESET = SubResource( 34 )
anims/flash = SubResource( 35 )

[node name="Screen" type="Node2D" parent="."]
position = Vector2( 128, 160 )

[node name="Screen" type="Sprite" parent="Screen"]
texture = ExtResource( 1 )
centered = false

[node name="PowerBarPanel" type="Control" parent="Screen/Screen"]
margin_right = 40.0
margin_bottom = 40.0
script = ExtResource( 14 )

[node name="PowerBar" type="TextureProgress" parent="Screen/Screen/PowerBarPanel"]
margin_left = 184.0
margin_top = 76.0
margin_right = 230.0
margin_bottom = 468.0
texture_progress = ExtResource( 7 )
fill_mode = 3

[node name="Tween" type="Tween" parent="Screen/Screen/PowerBarPanel/PowerBar"]

[node name="SideBar" type="Sprite" parent="Screen/Screen/PowerBarPanel"]
position = Vector2( 175, 272 )
texture = ExtResource( 15 )
hframes = 6
frame = 5

[node name="Blinker" type="AnimationPlayer" parent="Screen/Screen/PowerBarPanel/SideBar"]
anims/Blink = SubResource( 51 )

[node name="Peggle" type="Sprite" parent="Screen"]
visible = false
modulate = Color( 1.5, 1.5, 1.5, 1 )
position = Vector2( 728, 76 )
scale = Vector2( 1.5, 1.5 )
texture = ExtResource( 9 )
centered = false

[node name="Dots" type="Polygon2D" parent="Screen"]
visible = false
modulate = Color( 0.78, 1.34, 0.5, 1 )
position = Vector2( 724, 76 )
scale = Vector2( 1.5, 1.5 )
polygon = PoolVector2Array( -2.66669, 2.66666, -2.66669, 8, -5.33331, 8, -5.33331, 2.66666 )

[node name="Dots2" type="Polygon2D" parent="Screen"]
visible = false
modulate = Color( 0.78, 1.34, 0.5, 1 )
position = Vector2( 708, 76 )
scale = Vector2( 1.5, 1.5 )
polygon = PoolVector2Array( -2.66669, 2.66666, -2.66669, 8, -8, 8, -8, 2.66666 )

[node name="Dots3" type="Polygon2D" parent="Screen"]
visible = false
modulate = Color( 0.78, 1.34, 0.5, 1 )
position = Vector2( 685.714, 76 )
scale = Vector2( 0.642856, 1.5 )
polygon = PoolVector2Array( -2.66669, 2.66666, -2.66669, 8, -21.3334, 8, -21.3334, 2.66666 )

[node name="ScreenReflections" type="Sprite" parent="Screen"]
modulate = Color( 1.74118, 1.74118, 1.72941, 0.0509804 )
light_mask = 0
position = Vector2( 80, -130 )
texture = ExtResource( 6 )
centered = false

[node name="ScreenDots" type="Sprite" parent="Screen"]
modulate = Color( 1.92157, 1.97255, 2.00392, 0.870588 )
light_mask = 0
texture = ExtResource( 3 )
centered = false

[node name="AnimationPlayer" type="AnimationPlayer" parent="Screen"]
root_node = NodePath("../Peggle")
autoplay = "flash"
anims/flash = SubResource( 52 )

[node name="Peggle" type="Node2D" parent="."]
visible = false
position = Vector2( -220, -144 )

[node name="Positions" parent="Peggle" instance=ExtResource( 12 )]
position = Vector2( 648, 400 )

[node name="Pegs" type="Node2D" parent="Peggle"]
position = Vector2( 648, 400 )
script = ExtResource( 13 )
LEVEL_JSON = "res://designer/level-1671495966.json"
POSITIONS_NODE = NodePath("../Positions")

[node name="Bounds" type="StaticBody2D" parent="Peggle"]
position = Vector2( 628, 368 )
collision_layer = 15
collision_mask = 15

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="Peggle/Bounds"]
polygon = PoolVector2Array( 0, 0, 0, 412, -16, 428, -16, -16, 536, -16, 536, 428, -16, 428, 0, 412, 520, 412, 520, 0 )

[node name="Camera" type="Node2D" parent="."]
script = ExtResource( 11 )

[node name="Camera2D" type="Camera2D" parent="Camera"]
position = Vector2( 608, 428 )
current = true
smoothing_enabled = true
smoothing_speed = 9.0

[node name="Position2DCenter" type="Position2D" parent="Camera"]
position = Vector2( 1004, 512 )

[node name="Position2DPeggle" type="Position2D" parent="Camera"]
position = Vector2( 608, 428 )

[node name="Tween" type="Tween" parent="Camera"]

[connection signal="tween_all_completed" from="Screen/Screen/PowerBarPanel/PowerBar/Tween" to="Screen/Screen/PowerBarPanel" method="_on_Tween_tween_all_completed"]
